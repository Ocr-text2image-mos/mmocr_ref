# Copyright (c) OpenMMLab. All rights reserved.
import os.path as osp
from abc import abstractmethod
from typing import Dict, List, Optional

from mmengine import mkdir_or_exist

from .data_preparer import CFG_GENERATORS


class BaseConfigGenerator:
    """Base class for config generator.

    Args:
        data_root (str): The root path of the dataset.
        task (str): The task of the dataset.
        dataset_name (str): The name of the dataset.
        extra_anns (List[Dict], optional): A list of extra annotation files
            that are not generated by Data Converter, but you would like them
            to appear in the base configs. Each element is typically a dict
            with the following fields:
            - file (str): The path to the annotation file relative to
              data_root.
            - split (str): The split the annotation belongs to. Usually
              it can be 'train', 'val' and 'test'.
            - prefix (str, optional): Affects the prefix of the resulting
              variable in the generated config. Defaults to be the same as
              ``dataset_name``.
        config_path (str): Path to the configs. Defaults to 'configs/'.

    Example:
        It generates a dataset config like:
        >>> ic15_rec_data_root = 'data/icdar2015/'
        >>> icdar2015_textrecog_train = dict(
        >>>     type='OCRDataset',
        >>>     data_root=ic15_rec_data_root,
        >>>     ann_file='textrecog_train.json',
        >>>     test_mode=False,
        >>>     pipeline=None)
        >>> icdar2015_textrecog_test = dict(
        >>>     type='OCRDataset',
        >>>     data_root=ic15_rec_data_root,
        >>>     ann_file='textrecog_test.json',
        >>>     test_mode=True,
        >>>     pipeline=None)
    """

    def __init__(
        self,
        data_root: str,
        task: str,
        dataset_name: str,
        extra_anns: Optional[List[Dict]] = None,
        config_path: str = 'configs/',
    ) -> None:
        self.config_path = config_path
        self.data_root = data_root
        self.task = task
        self.dataset_name = dataset_name
        self._prepare_anns(extra_anns)

    def __call__(self, split2ann: Dict) -> None:
        """Generates the base dataset config. It accepts a simple dictionary
        that maps a split to the annotation file, which is usually generated by
        Data Converter.

        Args:
            split2ann (Dict[str, str]): A dictionary that maps the splits to
                its corresponding annotation file.
        """

        all_anns = self._merge_anns(split2ann)
        dataset_config = self._gen_dataset_config(all_anns)

        cfg_path = osp.join(self.config_path, self.task, '_base_', 'datasets',
                            f'{self.dataset_name}.py')
        if osp.exists(cfg_path):
            while True:
                c = input(f'{cfg_path} already exists, overwrite? (Y/n) ') \
                    or 'Y'
                if c.lower() == 'y':
                    break
                if c.lower() == 'n':
                    return
        mkdir_or_exist(osp.dirname(cfg_path))
        with open(cfg_path, 'w') as f:
            f.write(
                f'{self.dataset_name}_{self.task}_data_root = \'{self.data_root}\'\n'  # noqa: E501
            )
            f.write(dataset_config)

    @abstractmethod
    def _gen_dataset_config(self, ann_dict: Dict) -> str:
        """Generate a full dataset config based on the annotation file
        dictionary.

        Args:
            ann_dict (dict[str, dict(str, str)]): A nested dictionary that maps
                a config variable name (such as icdar2015_textrecog_train) to
                its corresponding annotation information dict. Each dict
                contains following keys:
                - file (str): The path to the annotation file relative to
                data_root.
                - split (str): The split the annotation belongs to. Usually
                it can be 'train', 'val' and 'test'.
                - prefix (str): Affects the prefix of the resulting
                variable in the generated config.

        Returns:
            str: The generated dataset config.
        """

    def _prepare_anns(self, extra_anns: Optional[List[Dict]]) -> None:
        """Preprocess extra_anns and stores these information into
        self.default_anns.

        Args:
            extra_anns (List[Dict], optional): A list of extra annotation files
                that are not generated by Data Converter, but you would like
                them to appear in the base configs. Each element is typically a
                dict with the following fields:
                - file (str): The path to the annotation file relative to
                data_root.
                - split (str): The split the annotation belongs to. Usually
                it can be 'train', 'val' and 'test'.
                - prefix (str, optional): Affects the prefix of the resulting
                variable in the generated config. Defaults to be the same as
                ``dataset_name``.
        """
        self.default_anns = {}
        if extra_anns is None:
            return
        for extra_ann in extra_anns:
            assert 'file' in extra_ann
            assert 'split' in extra_ann
            if 'prefix' not in extra_ann:
                extra_ann['prefix'] = self.dataset_name
            key = f'{extra_ann["prefix"]}_{self.task}_{extra_ann["split"]}'
            if key in self.default_anns:
                raise ValueError(
                    'Duplicate prefix and split pair '
                    f'({extra_ann["prefix"]}, {extra_ann["split"]}) found in '
                    'extra_anns!')
            self.default_anns[key] = extra_ann

    def _merge_anns(self, split2ann: Dict) -> Dict:
        """Merge split2ann into self.default_anns and return the merged
        dictionary.

        Args:
            split2ann (Dict[str, str]): A dictionary that maps the splits to
                its corresponding annotation file.
        """

        new_anns = self.default_anns.copy()
        if len(split2ann) != 0:
            for split, ann_file in split2ann.items():
                key = f'{self.dataset_name}_{self.task}_{split}'
                if key in new_anns:
                    raise ValueError(
                        'Duplicate prefix and split pair '
                        f'({self.dataset_name}, {split}) found in ann_dict! '
                        'You may have specified the same split in'
                        ' config_geneator.extra_anns.')
                new_anns[key] = dict(
                    prefix=self.dataset_name, split=split, file=ann_file)
        return new_anns


@CFG_GENERATORS.register_module()
class TextDetConfigGenerator(BaseConfigGenerator):
    """Text detection config generator.

    Args:
        data_root (str): The root path of the dataset.
        dataset_name (str): The name of the dataset.
        extra_anns (List[Dict], optional): A list of extra annotation files
            that are not generated by Data Converter, but you would like them
            to appear in the base configs. Each element is typically a dict
            with the following fields:
            - file (str): The path to the annotation file relative to
              data_root.
            - split (str): The split the annotation belongs to. Usually
              it can be 'train', 'val' and 'test'.
            - prefix (str, optional): Affects the prefix of the resulting
              variable in the generated config. Defaults to be the same as
              ``dataset_name``.
        config_path (str): Path to the configs. Defaults to 'configs/'.
    """

    def __init__(
        self,
        data_root: str,
        dataset_name: str,
        extra_anns: Optional[List[Dict]] = None,
        config_path: str = 'configs/',
    ) -> None:
        super().__init__(
            data_root=data_root,
            task='textdet',
            dataset_name=dataset_name,
            config_path=config_path,
            extra_anns=extra_anns)

    def _gen_dataset_config(self, ann_dicts: Dict) -> str:
        """Generate a full dataset config based on the annotation file
        dictionary.

        Args:
            ann_dict (dict[str, dict(str, str)]): A nested dictionary that maps
                a config variable name (such as icdar2015_textrecog_train) to
                its corresponding annotation information dict. Each dict
                contains following keys:
                - file (str): The path to the annotation file relative to
                data_root.
                - split (str): The split the annotation belongs to. Usually
                it can be 'train', 'val' and 'test'.
                - prefix (str): Affects the prefix of the resulting
                variable in the generated config.

        Returns:
            str: The generated dataset config.
        """
        cfg = ''
        for key_name, ann_dict in ann_dicts.items():
            cfg += f'\n{key_name} = dict(\n'
            cfg += '    type=\'OCRDataset\',\n'
            cfg += '    data_root=' + f'{self.dataset_name}_{self.task}_data_root,\n'  # noqa: E501
            cfg += f'    ann_file=\'{ann_dict["file"]}\',\n'
            if ann_dict['split'] == 'train':
                cfg += '    filter_cfg=dict(filter_empty_gt=True, min_size=32),\n'  # noqa: E501
            elif ann_dict['split'] in ['test', 'val']:
                cfg += '    test_mode=True,\n'
            cfg += '    pipeline=None)\n'
        return cfg


@CFG_GENERATORS.register_module()
class TextRecogConfigGenerator(BaseConfigGenerator):
    """Text recognition config generator.

    Args:
        data_root (str): The root path of the dataset.
        dataset_name (str): The name of the dataset.
        extra_anns (List[Dict], optional): A list of extra annotation files
            that are not generated by Data Converter, but you would like them
            to appear in the base configs. Each element is typically a dict
            with the following fields:
            - file (str): The path to the annotation file relative to
              data_root.
            - split (str): The split the annotation belongs to. Usually
              it can be 'train', 'val' and 'test'.
            - prefix (str, optional): Affects the prefix of the resulting
              variable in the generated config. Defaults to be the same as
              ``dataset_name``.
        config_path (str): Path to the configs. Defaults to 'configs/'.
    """

    def __init__(
        self,
        data_root: str,
        dataset_name: str,
        extra_anns: Optional[List[Dict]] = None,
        config_path: str = 'configs/',
    ) -> None:
        super().__init__(
            data_root=data_root,
            task='textrecog',
            dataset_name=dataset_name,
            config_path=config_path,
            extra_anns=extra_anns)

    def _gen_dataset_config(self, ann_dicts: Dict) -> str:
        """Generate a full dataset config based on the annotation file
        dictionary.

        Args:
            ann_dict (dict[str, dict(str, str)]): A nested dictionary that maps
                a config variable name (such as icdar2015_textrecog_train) to
                its corresponding annotation information dict. Each dict
                contains following keys:
                - file (str): The path to the annotation file relative to
                data_root.
                - split (str): The split the annotation belongs to. Usually
                it can be 'train', 'val' and 'test'.
                - prefix (str): Affects the prefix of the resulting
                variable in the generated config.

        Returns:
            str: The generated dataset config.
        """
        cfg = ''
        for key_name, ann_dict in ann_dicts.items():
            cfg += f'\n{key_name} = dict(\n'
            cfg += '    type=\'OCRDataset\',\n'
            cfg += '    data_root=' + f'{self.dataset_name}_{self.task}_data_root,\n'  # noqa: E501
            cfg += f'    ann_file=\'{ann_dict["file"]}\',\n'
            if ann_dict['split'] in ['test', 'val']:
                cfg += '    test_mode=True,\n'
            cfg += '    pipeline=None)\n'
        return cfg
